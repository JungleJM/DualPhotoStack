# Immich Docker Compose Template
# This template supports multi-interface binding for secure network access
# Variables will be substituted by the DPS deployment system

name: immich
services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    volumes:
      # Shared photo library (read-write for Immich)
      - {{LIBRARY_PATH}}:/usr/src/app/upload/library
      # Immich application data storage
      - ./data/upload:/usr/src/app/upload
      # System time sync
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      # Multi-interface binding for secure access
{{IMMICH_PORT_BINDINGS}}
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false
      test: ["CMD", "curl", "-f", "http://localhost:2283/api/server-info/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    image: docker.io/valkey/valkey:8-bookworm@sha256:ff21bc0f8194dc9c105b769aeabf9585fea6a8ed649c0781caeac5cb3c247884
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: redis-cli ping || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  database:
    container_name: immich_postgres
    image: ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0@sha256:fa4f6e0971f454cd95fec5a9aaed2ed93d8f46725cc6bc61e0698e97dba96da1
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: --data-checksums
    volumes:
      - ./data/database:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  model-cache:

networks:
  default:
    name: dps-network
    external: false